import streamlit as st
import requests
import json
import time
import pandas as pd
import concurrent.futures
import os
import multiprocessing
from utils import extract_section
from streamlit.runtime.scriptrunner_utils.script_run_context import add_script_run_ctx, get_script_run_ctx
import queue
from threading import Lock

import warnings

warnings.filterwarnings("ignore")

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="VIB Agent Testing",
    page_icon="ü§ñ",
    layout="wide"
)
GENERAL_PURPOSE_API_URL = st.text_input("GENERAL_PURPOSE_API_URL")
VIB_API_URL = st.text_input("VIB_API_URL")

# T·ª± ƒë·ªông x√°c ƒë·ªãnh s·ªë workers t·ªëi ∆∞u
CPU_COUNT = multiprocessing.cpu_count()
MAX_WORKERS = min(int(CPU_COUNT * 0.75), 8)  # S·ª≠ d·ª•ng 75% s·ªë CPU cores, nh∆∞ng kh√¥ng qu√° 8 workers
MAX_WORKERS = max(MAX_WORKERS, 2)  # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 2 workers

# T·∫°o session ƒë·ªÉ t√°i s·ª≠ d·ª•ng k·∫øt n·ªëi
session = requests.Session()
session.mount('https://', requests.adapters.HTTPAdapter(
    max_retries=3,
    pool_connections=MAX_WORKERS,
    pool_maxsize=MAX_WORKERS
))

# Load prompts
try:
    evaluate_prompt = json.load(open("prompts/evaluation/prompt.json", "r"))
    evaluate_system_prompt = evaluate_prompt["system_prompt"]
    evaluate_human_prompt_template = evaluate_prompt["human_prompt"]
except Exception as e:
    st.error(f"L·ªói khi ƒë·ªçc file prompt: {str(e)}")
    st.stop()

# Th√™m bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ ti·∫øn tr√¨nh
progress_queue = queue.Queue()
progress_lock = Lock()

def update_progress(progress_container, total_questions):
    """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh t·ª´ queue"""
    while True:
        try:
            message = progress_queue.get_nowait()
            with progress_container.container():
                if message.startswith("SUCCESS"):
                    st.success(message[7:])
                elif message.startswith("ERROR"):
                    st.error(message[5:])
                else:
                    st.info(message)
        except queue.Empty:
            break

def query_with_retry(url, payload, max_retries=3, delay=1):
    for attempt in range(max_retries):
        try:
            response = session.post(url, json=payload, timeout=30)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            if attempt == max_retries - 1:
                raise
            time.sleep(delay * (attempt + 1))
    return None

def process_single_question(question, true_answer, index, total_questions):
    try:
        # L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ VIB agent
        vib_response = query_with_retry(VIB_API_URL, {"question": question})
        if not vib_response:
            progress_queue.put(f"ERROR L·ªói khi l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ agent cho c√¢u h·ªèi {index + 1}")
            return None
        vib_response = vib_response.json()["text"]
        
        # ƒê√°nh gi√° c√¢u tr·∫£ l·ªùi
        evaluate_human_prompt = evaluate_human_prompt_template.format(
            question=question,
            true_answer=true_answer,
            agent_answer=vib_response
        )
        
        payload = {
            "question": "ƒê√°nh gi√° c√¢u tr·∫£ l·ªùi t·ª´ agent so v·ªõi c√¢u tr·∫£ l·ªùi chu·∫©n (true_answer)",
            "overrideConfig": {
                "agentName": "VIBEvaluate",
                "promptValues": {
                    "overrided_system_prompt": evaluate_system_prompt,
                    "overrided_human_prompt": evaluate_human_prompt
                }
            }
        }
        
        evaluate_response = query_with_retry(GENERAL_PURPOSE_API_URL, payload)
        if not evaluate_response:
            progress_queue.put(f"ERROR L·ªói khi ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi {index + 1}")
            return None
        evaluate_response = evaluate_response.json()["text"]
        evaluate_result = extract_section(evaluate_response)
        
        progress_queue.put(f"SUCCESS ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng c√¢u h·ªèi {index + 1}/{total_questions}")
        
        return {
            "question": question,
            "true_answer": true_answer,
            "vib_response": vib_response,
            "evaluate_result": evaluate_result
        }
    except Exception as e:
        progress_queue.put(f"ERROR L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi {index + 1}: {str(e)}")
        return None

def process_questions_batch(questions, true_answers):
    results = []
    failed_questions = []
    
    # T·∫°o container cho ti·∫øn tr√¨nh
    progress_container = st.empty()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = []
        for i, (question, true_answer) in enumerate(zip(questions, true_answers)):
            future = executor.submit(process_single_question, question, true_answer, i, len(questions))
            futures.append(future)
        
        # Hi·ªÉn th·ªã ti·∫øn tr√¨nh t·ªïng th·ªÉ
        progress_queue.put(f"ƒêang x·ª≠ l√Ω {len(questions)} c√¢u h·ªèi...")
        
        # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh trong khi ch·ªù k·∫øt qu·∫£
        while not all(future.done() for future in futures):
            update_progress(progress_container, len(questions))
            time.sleep(0.1)
        
        # C·∫≠p nh·∫≠t l·∫ßn cu·ªëi
        update_progress(progress_container, len(questions))
        
        for future in futures:
            try:
                result = future.result()
                if result:
                    results.append(result)
            except Exception as e:
                st.error(f"L·ªói khi thu th·∫≠p k·∫øt qu·∫£: {str(e)}")
                failed_questions.append((question, str(e)))
    
    return results, failed_questions


# Giao di·ªán Streamlit
st.title("ü§ñ VIB Agent Testing")

# T·∫°o c√°c tab
tab1, tab2 = st.tabs(["Test ƒë∆°n l·∫ª", "Test h√†ng lo·∫°t"])

with tab1:
    st.subheader("Nh·∫≠p c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi chu·∫©n")
    question = st.text_area("C√¢u h·ªèi:", height=100)
    true_answer = st.text_area("C√¢u tr·∫£ l·ªùi chu·∫©n:", height=200)
    
    if st.button("Test"):
        if question and true_answer:
            progress_container = st.empty()
            progress_container.text("ƒêang x·ª≠ l√Ω...")
            result = process_single_question(question, true_answer, 0, 1)
            
            if result:
                progress_container.success("X·ª≠ l√Ω th√†nh c√¥ng!")
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£")
                st.write("**C√¢u tr·∫£ l·ªùi t·ª´ VIB Agent:**")
                st.write(result["vib_response"])
                
                st.write("**ƒê√°nh gi√°:**")
                scores = result["evaluate_result"]["scores"]
                for metric, score in scores.items():
                    st.write(f"- {metric}: {score}")
                
                st.write("**Nh·∫≠n x√©t v√† g√≥p √Ω c·∫£i thi·ªán:**")
                st.write(result["evaluate_result"]["Nh·∫≠n x√©t v√† g√≥p √Ω c·∫£i thi·ªán"])
        else:
            st.warning("Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi chu·∫©n")

with tab2:
    st.subheader("Test h√†ng lo·∫°t t·ª´ file Excel")
    
    # Th√™m ch·ª©c nƒÉng t·∫£i l√™n file
    uploaded_file = st.file_uploader("Ch·ªçn file Excel", type=['xlsx', 'xls'])
    
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            if len(df.columns) < 2:
                st.error("File Excel ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt: c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi chu·∫©n")
                st.stop()
                
            questions = df.iloc[:, 0].tolist()
            true_answers = df.iloc[:, 1].tolist()
            
            # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã
            display_df = pd.DataFrame({
                'C√¢u h·ªèi': questions,
                'C√¢u tr·∫£ l·ªùi chu·∫©n': true_answers
            })
            
            # Hi·ªÉn th·ªã b·∫£ng c√≥ th·ªÉ ch·ªânh s·ª≠a
            edited_df = st.dataframe(
                display_df,
                use_container_width=True,
                selection_mode="multi-row",
                on_select="rerun",
                hide_index=True
            )
            
            # L·∫•y c√°c c√¢u h·ªèi ƒë√£ ch·ªçn
            selected_rows = edited_df['selection']['rows']
            selected_questions = display_df.loc[selected_rows, 'C√¢u h·ªèi'].tolist()
            selected_true_answers = display_df.loc[selected_rows, 'C√¢u tr·∫£ l·ªùi chu·∫©n'].tolist()
            
            if st.button("Test h√†ng lo·∫°t"):
                if len(selected_questions) > 0:
                    # X·ª≠ l√Ω ƒëa lu·ªìng
                    results, failed_questions = process_questions_batch(selected_questions, selected_true_answers)
                    
                    if results:
                        # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£
                        data = {
                            'Question': [r["question"] for r in results],
                            'True Answer': [r["true_answer"] for r in results],
                            'Agent Answer': [r["vib_response"] for r in results],
                            'Information Coverage Score': [r["evaluate_result"]["scores"]["Information Coverage"] for r in results],
                            'Hallucination Score': [r["evaluate_result"]["scores"]["Information Accuracy and Relevance"] for r in results],
                            'Format Score': [r["evaluate_result"]["scores"]["Format"] for r in results],
                            'Language Score': [r["evaluate_result"]["scores"]["Language"] for r in results],
                            'Handling Unknown Score': [r["evaluate_result"]["scores"]["Handling Unknown"] for r in results],
                            'Average Score': [r["evaluate_result"]["scores"]["Average"] for r in results],
                            'Comment': [r["evaluate_result"]["Nh·∫≠n x√©t v√† g√≥p √Ω c·∫£i thi·ªán"] for r in results]
                        }
                        
                        results_df = pd.DataFrame(data)
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        st.dataframe(results_df, use_container_width=True)
                        
                        # Th√™m n√∫t t·∫£i xu·ªëng k·∫øt qu·∫£
                        st.download_button(
                            label="T·∫£i xu·ªëng k·∫øt qu·∫£",
                            data=results_df.to_csv(index=False).encode('utf-8'),
                            file_name='evaluation_results.csv',
                            mime='text/csv'
                        )
                        
                        if failed_questions:
                            st.warning(f"C√≥ {len(failed_questions)} c√¢u h·ªèi x·ª≠ l√Ω th·∫•t b·∫°i")
                else:
                    st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c√¢u h·ªèi ƒë·ªÉ test")
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    else:
        st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu")

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
st.sidebar.subheader("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
st.sidebar.markdown("""
### Test ƒë∆°n l·∫ª
1. Nh·∫≠p c√¢u h·ªèi v√†o √¥ "C√¢u h·ªèi"
2. Nh·∫≠p c√¢u tr·∫£ l·ªùi chu·∫©n v√†o √¥ "C√¢u tr·∫£ l·ªùi chu·∫©n"
3. Nh·∫•n n√∫t "Test" ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë√°nh gi√°

### Test h√†ng lo·∫°t
1. Ch·ªçn c√°c c√¢u h·ªèi mu·ªën test t·ª´ b·∫£ng
2. Nh·∫•n n√∫t "Test h√†ng lo·∫°t" ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë√°nh gi√°
3. K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng v√† c√≥ th·ªÉ t·∫£i v·ªÅ Excel
""") 
